# Project Rules for *PulseFire* Development

## Purpose
The *Project Rules* provide a framework for the development team to create *PulseFire*, a first-person shooter (FPS) prototype inspired by *Tom Clancy’s Rainbow Six Vegas* and *Call of Duty*. These rules ensure the project meets its objectives, adheres to budget and timeline constraints, and maintains high quality standards. They cover development practices, team collaboration, scope management, budget and timeline, quality assurance, stakeholder communication, and playtesting and feedback.

## Scope
The rules apply to all aspects of *PulseFire*’s development, including coding, art, sound, user experience, project management, testing, networking, and security. They are tailored to the prototype’s goal of delivering a small multiplayer map with responsive controller mechanics within a $1,000 budget.

## Rules

### Development Practices
- **Coding Standards**:
  - Use clear, descriptive variable names for readability.
  - Follow Unreal Engine’s coding conventions for C++ and Blueprints.
  - Commit code to Git at least daily with detailed commit messages.
  - Write unit tests for critical systems like movement and shooting.
  - Optimize code for performance to maintain 60 FPS on mid-range PCs.
- **Documentation**:
  - Maintain a shared repository for project documentation.
  - Update documentation with each major change or decision.
  - Include comments in code and Blueprints for clarity.

### Team Collaboration
- **Roles and Responsibilities**:
  - Clearly define roles (e.g., programmer, artist, designer) and assign tasks accordingly.
  - Each team member must complete assigned tasks by agreed deadlines.
- **Communication**:
  - Hold weekly check-ins to align on progress and issues.
  - Use Discord or a similar tool for daily communication.
  - Document decisions and share with the team.

### Scope Management
- **Feature Prioritization**:
  - Focus on core mechanics: multiplayer functionality, controller mechanics, basic UI, and match structure.
  - Defer non-essential features (e.g., advanced movement, sound design) unless time and budget allow.
- **Change Control**:
  - Any scope changes must be approved by the team and documented.
  - Assess impact on budget and timeline before approving changes.

### Budget and Timeline
- **Budget**:
  - Track all expenses to ensure they stay within $1,000.
  - Use free or client-provided assets to minimize costs.
- **Timeline**:
  - Set milestones for key deliverables (e.g., multiplayer setup, controller integration).
  - Deliver the prototype within 2-3 weeks, as per the deployment plan.

### Quality Assurance
- **Testing**:
  - Conduct playtests with 2-4 players to evaluate gameplay and controller feel.
  - Perform technical tests for performance (60 FPS, <50ms latency).
  - Use automated tests for core mechanics where possible.
- **Bug Tracking**:
  - Log bugs in Trello or Jira, prioritizing critical issues.
  - Fix bugs before final delivery.

### Stakeholder Communication
- **Client Updates**:
  - Provide weekly email updates to the client on progress and issues.
  - Share the prototype build via secure file-sharing for feedback.
- **Investor Engagement**:
  - Prepare a demo video or presentation for potential investors.
  - Highlight key features and funding potential in communications.

### Playtesting and Feedback
- **Playtesting**:
  - Conduct at least two playtest sessions with external players.
  - Focus on controller responsiveness and multiplayer stability.
- **Feedback Integration**:
  - Collect feedback via surveys or direct input.
  - Prioritize feedback on core mechanics for refinement.