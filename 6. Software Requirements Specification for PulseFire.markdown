# Software Requirements Specification for *PulseFire*

## 1. Introduction

### 1.1 Purpose
This Software Requirements Specification (SRS) outlines the functional and non-functional requirements for *PulseFire*, a first-person shooter (FPS) prototype developed using Unreal Engine. The document aims to guide developers in building a multiplayer game prototype focused on controller-based shooting mechanics, intended for playtesting to secure funding for full development.

### 1.2 Scope
*PulseFire* is a multiplayer FPS prototype featuring a small map, controller-optimized gameplay, and a basic user interface. It combines tactical and action elements inspired by *Tom Clancy’s Rainbow Six Vegas* and *Call of Duty*. The prototype supports 2-4 players over a local network, serving as a proof-of-concept for potential investors and gamers.

### 1.3 Definitions, Acronyms, and Abbreviations
- **FPS**: First-Person Shooter
- **MVP**: Minimum Viable Product
- **PRD**: Product Requirements Document
- **SRS**: Software Requirements Specification
- **Unreal Engine**: Game development engine used for the prototype
- **HUD**: Heads-Up Display
- **LAN**: Local Area Network

### 1.4 References
- Job Analysis Report for Unreal Engine Developer Position
- Work Breakdown Structure for FPS Prototype
- Product Description for FPS Prototype
- Target Audience Document for *PulseFire*
- Technical Product Requirements Document for *PulseFire* MVP

## 2. Overall Description

### 2.1 Product Perspective
*PulseFire* is a standalone FPS prototype built with Unreal Engine 5.4, designed to test core gameplay mechanics, particularly controller responsiveness, in a multiplayer setting. It draws inspiration from *Rainbow Six Vegas* for tactical depth and *Call of Duty* for fast-paced action, aiming to demonstrate viability for a full game.

### 2.2 Product Functions
The prototype provides:
- Multiplayer gameplay for 2-4 players over LAN.
- Controller-based movement, shooting, and interaction mechanics.
- A basic HUD displaying health, ammo, and match status.
- A timed match structure with scoring and results display.

### 2.3 User Classes and Characteristics
- **Gamers (Primary Users)**: Aged 18-34, enjoy FPS games with tactical and action elements, prefer controller input, and are likely familiar with titles like *Rainbow Six Siege* and *Call of Duty*.
- **Investors/Developers (Secondary Users)**: Industry professionals evaluating the prototype’s potential for funding or collaboration, interested in technical quality and market appeal.

### 2.4 Operating Environment
- **Platform**: Windows PC
- **Input Devices**: Xbox-style controllers
- **Network**: LAN for multiplayer connectivity
- **Hardware**: Mid-range PCs (e.g., RTX 3060 equivalent)

### 2.5 Design and Implementation Constraints
- Development must be completed within a $1,000 budget.
- Must use Unreal Engine 5.4.
- Should leverage existing assets, templates, or the client’s prior build to minimize costs.
- Limited to 2-4 players due to prototype scope.

### 2.6 Assumptions and Dependencies
- Assumes access to the client’s existing Unreal Engine 5.4 build, which may be adapted.
- Depends on Unreal Engine’s networking features for multiplayer functionality.
- Assumes players have compatible controllers and network setup for LAN play.

## 3. Specific Requirements

### 3.1 Functional Requirements

#### 3.1.1 Main Menu
| **ID** | **Requirement** |
|--------|-----------------|
| FR1.1.1 | The system shall display a main menu with "Multiplayer" and "Quit" options. |
| FR1.1.2 | Selecting "Multiplayer" shall navigate to the multiplayer menu. |
| FR1.1.3 | Selecting "Quit" shall exit the game. |

#### 3.1.2 Multiplayer Menu
| **ID** | **Requirement** |
|--------|-----------------|
| FR1.2.1 | The system shall display a multiplayer menu with "Host Game" and "Join Game" options. |
| FR1.2.2 | Selecting "Host Game" shall create a local game session and display an IP address for others to join. |
| FR1.2.3 | Selecting "Join Game" shall prompt the player to enter an IP address and connect to the host’s session. |

#### 3.1.3 In-Game Functionality
| **ID** | **Requirement** |
|--------|-----------------|
| FR1.3.1 | The system shall allow players to move (forward, backward, left, right) using the left analog stick. |
| FR1.3.2 | The system shall allow players to look around using the right analog stick. |
| FR1.3.3 | The system shall allow players to jump by pressing the A button. |
| FR1.3.4 | The system shall allow players to crouch by pressing the B button. |
| FR1.3.5 | The system shall allow players to aim down sights by pressing the right bumper. |
| FR1.3.6 | The system shall allow players to fire their weapon by pressing the right trigger. |
| FR1.3.7 | The system shall allow players to reload their weapon by pressing the X button. |
| FR1.3.8 | The system shall display a HUD showing the player’s health, ammo, and match timer. |
| FR1.3.9 | The system shall decrease a player’s health when hit by enemy bullets. |
| FR1.3.10 | The system shall respawn a player after 5 seconds if their health reaches zero. |
| FR1.3.11 | The system shall allow players to shoot and hit other players, registering damage. |
| FR1.3.12 | The system shall end the match when the timer reaches zero or a score limit is reached. |
| FR1.3.13 | The system shall display a results screen showing final scores and the winner. |
| FR1.3.14 | The system shall display a pause menu when the Start button is pressed, with "Resume" and "Main Menu" options. |
| FR1.3.15 | Selecting "Resume" in the pause menu shall return the player to the game. |
| FR1.3.16 | Selecting "Main Menu" in the pause menu shall exit the game session. |

#### 3.1.4 Data Management
| **ID** | **Requirement** |
|--------|-----------------|
| FR1.4.1 | The system shall maintain player data, including health, position, and ammo. |
| FR1.4.2 | The system shall track game state, including match time and scores. |
| FR1.4.3 | The system shall store weapon properties, such as damage and fire rate. |

### 3.2 Non-Functional Requirements

#### 3.2.1 Usability
| **ID** | **Requirement** |
|--------|-----------------|
| NFR2.1.1 | The game shall be intuitive for players familiar with FPS games and controllers. |
| NFR2.1.2 | All menus and in-game actions shall be navigable using a controller. |

#### 3.2.2 Reliability
| **ID** | **Requirement** |
|--------|-----------------|
| NFR2.2.1 | The game shall handle player disconnections, allowing reconnection or return to the main menu. |
| NFR2.2.2 | The game shall recover from crashes without losing critical game state. |

#### 3.2.3 Performance
| **ID** | **Requirement** |
|--------|-----------------|
| NFR2.3.1 | The game shall maintain a minimum frame rate of 60 FPS on mid-range hardware (e.g., RTX 3060 equivalent). |
| NFR2.3.2 | Input latency shall be less than 50ms from controller input to on-screen action. |
| NFR2.3.3 | Load times shall be less than 10 seconds on target hardware. |
| NFR2.3.4 | Network latency for multiplayer shall be below 100ms for LAN connections. |

#### 3.2.4 Security
| **ID** | **Requirement** |
|--------|-----------------|
| NFR2.4.1 | Critical game logic (e.g., hit detection, movement validation) shall be server-authoritative to prevent cheating. |
| NFR2.4.2 | Network communications shall use Unreal Engine’s built-in encryption. |

#### 3.2.5 Scalability
| **ID** | **Requirement** |
|--------|-----------------|
| NFR2.5.1 | The prototype shall support 2-4 players in a multiplayer session. |
| NFR2.5.2 | The system shall be designed to allow future expansion for more players and larger maps. |

#### 3.2.6 Maintainability
| **ID** | **Requirement** |
|--------|-----------------|
| NFR2.6.1 | The code shall be documented with clear comments and modular structure. |
| NFR2.6.2 | Version control (e.g., Git) shall be used to track changes and support updates. |

## 4. Appendices
No appendices are included in this version of the SRS.